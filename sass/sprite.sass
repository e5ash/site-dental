/*
  SASS variables are information about icon's compiled state, stored under its original file name

  .icon-home
    width: $icon-home-width

  The large array-like variables contain all information about a single icon
  $icon-home: x y offset_x offset_y width height total_width total_height image_path

  At the bottom of this section, we provide information about the spritesheet itself
  $spritesheet: width height image $spritesheet-sprites
  */
$arrow-next-name: 'arrow-next'
$arrow-next-x: 0px
$arrow-next-y: 0px
$arrow-next-offset-x: 0px
$arrow-next-offset-y: 0px
$arrow-next-width: 60px
$arrow-next-height: 60px
$arrow-next-total-width: 120px
$arrow-next-total-height: 87px
$arrow-next-image: '../img/sprite.png'
$arrow-next: (0px, 0px, 0px, 0px, 60px, 60px, 120px, 87px, '../img/sprite.png', 'arrow-next', )
$arrow-prev-name: 'arrow-prev'
$arrow-prev-x: 60px
$arrow-prev-y: 0px
$arrow-prev-offset-x: -60px
$arrow-prev-offset-y: 0px
$arrow-prev-width: 60px
$arrow-prev-height: 60px
$arrow-prev-total-width: 120px
$arrow-prev-total-height: 87px
$arrow-prev-image: '../img/sprite.png'
$arrow-prev: (60px, 0px, -60px, 0px, 60px, 60px, 120px, 87px, '../img/sprite.png', 'arrow-prev', )
$check-pink-name: 'check-pink'
$check-pink-x: 0px
$check-pink-y: 60px
$check-pink-offset-x: 0px
$check-pink-offset-y: -60px
$check-pink-width: 25px
$check-pink-height: 27px
$check-pink-total-width: 120px
$check-pink-total-height: 87px
$check-pink-image: '../img/sprite.png'
$check-pink: (0px, 60px, 0px, -60px, 25px, 27px, 120px, 87px, '../img/sprite.png', 'check-pink', )
$check-yellow-name: 'check-yellow'
$check-yellow-x: 25px
$check-yellow-y: 60px
$check-yellow-offset-x: -25px
$check-yellow-offset-y: -60px
$check-yellow-width: 25px
$check-yellow-height: 27px
$check-yellow-total-width: 120px
$check-yellow-total-height: 87px
$check-yellow-image: '../img/sprite.png'
$check-yellow: (25px, 60px, -25px, -60px, 25px, 27px, 120px, 87px, '../img/sprite.png', 'check-yellow', )
$tel-name: 'tel'
$tel-x: 50px
$tel-y: 60px
$tel-offset-x: -50px
$tel-offset-y: -60px
$tel-width: 15px
$tel-height: 16px
$tel-total-width: 120px
$tel-total-height: 87px
$tel-image: '../img/sprite.png'
$tel: (50px, 60px, -50px, -60px, 15px, 16px, 120px, 87px, '../img/sprite.png', 'tel', )
$spritesheet-width: 120px
$spritesheet-height: 87px
$spritesheet-image: '../img/sprite.png'
$spritesheet-sprites: ($arrow-next, $arrow-prev, $check-pink, $check-yellow, $tel, )
$spritesheet: (120px, 87px, '../img/sprite.png', $spritesheet-sprites, )

/*
  The provided mixins are intended to be used with the array-like variables

  .icon-home
    @include sprite-width($icon-home)

  .icon-email
    @include sprite($icon-email)

  Example usage in HTML:
    `display: block` sprite:
    <div class="icon-home"></div>

  To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
    // CSS
    .icon {
      display: inline-block;
    }

    // HTML
    <i class="icon icon-home"></i>
  */
@mixin sprite-width($sprite)
  width: nth($sprite, 5)

@mixin sprite-height($sprite)
  height: nth($sprite, 6)

@mixin sprite-position($sprite)
  $sprite-offset-x: nth($sprite, 3)
  $sprite-offset-y: nth($sprite, 4)
  background-position: $sprite-offset-x  $sprite-offset-y

@mixin sprite-image($sprite)
  $sprite-image: nth($sprite, 9)
  background-image: url(#{$sprite-image})

@mixin sprite($sprite)
  @include sprite-image($sprite)
  @include sprite-position($sprite)
  @include sprite-width($sprite)
  @include sprite-height($sprite)

/*
  The `sprites` mixin generates identical output to the CSS template
    but can be overridden inside of SASS

  @include sprites($spritesheet-sprites)
  */
@mixin sprites($sprites)
  @each $sprite in $sprites
    $sprite-name: nth($sprite, 10)
    .#{$sprite-name}
      @include sprite($sprite)
